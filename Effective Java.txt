Chapter 1: [PAGE 19]

-Java support four kinds of types:
	1. Interfaces (including annotations)
	2. Classes (including enums)
	3. Arrays
	4. Primitives
-A class's members consist of its fields, methods, member classes, and member interfaces. 
-A method's signature consists of its name and the types of its formal parameters; the signature does NOT include the method's return type
-This book does not use the term: inheritance. Instead it states that a class implements an interface or that one interface extends another. 
-The term: exported API, or API (application programming interface), refers to the classes, interfaces, constructors, members, and serialized forms by which a programmer accesses a class, interface, or package. 
-A programmer who writes a program that uses an API is referred to as a user of the API, whereas a class whose implementation uses an API is a client of the API
-Classes, interfaces, constructors, members, and serialized forms are collectively known as API elements. 
-In Java 9, a module system was added to the platform-- if a library makes use of the module system, its exported API is the union of the exported API's of all the packages exported by the library's module declaration. 

Chapter 2: [PAGE 23]
**This chapter concerns creating and destroying objects, when and how to create them, when and how to avoid creating them, how to ensure they are destroyed in a timely manner, and how to manage any cleanup actions that must precede their destruction**

- - - Item 1: Consider static factory methods instead of constructors [PAGE 23]
-A class can provide a public static factory method, which is simply a static method that returns an instance of the class. 

ADVANTAGES of static factory methods:

1. Unlike constructors they have names [PAGE 23]

-BigInteger(int, int, Random) ---> BigInteger.probablePrime. 
-A class can only have a single constructor with a given signature. (**A bad idea is to provide two constructors whoe parameter lists differ only in the order of the parameter types: it's hard to remember)
-Factory methods don't share the restriction because they have names. 

2. Unlike, constructors, they are not required to create a new object each time they're invoked. [PAGE 24]

-This allows immutable classes to use preconstructed instances, or to cache instances as they're constructed, and dispense them repeatedly to avoid creating unnecessary duplicate objects. 
-This technique is similar to the Flyweight Pattern
-It can improve performance if equivalent objects are requested often, especially if they are expensive to create. 
-Instance Control-- the ability of static factory methods to return the same object from repeated invocations allows classes to maintain a strict control over what instances exist at any time. 
	-Reasons to write instance controlled classes:
		1. Allows a class to guarantee that it a singleton or noninstantiable. 
		2. It allows an immutable value class to make the guarantee that no two equal instances exist (a.equals(b) if and only if a==b)

3. Unlike constructors, they can return an object of any subtype of their return type. [PAGE 24]

-Gives great flexibility in choosing the class of the returned object.
-an API can return objects without making their classes public: hiding implementation class leads to a compact API
-Lends itself to interface-based frameworks, where interfaces provide natural return types for static factory methods. 
-The Collections Framework API is much smaller than it would have been had it exported 45 separate public classes, one for each convenience implementation. 
-Not only bulk, but also conceptual weight. 
-Conceptual Weight: the number and difficulty of concepts that programmers must master in order to use the API. 
-Using a static factory method requires the client to refer to the returned object by interface rather than implementation class, which is generally good practice. 
-**It may still be necessary to put the bulk of the implementation code behind these static methods in a seperate package-private class-- because Java requires all static members of an interface be public. 

4. The class of the returned object can vary from call to call as a function of the input parameters. [PAGE 25]

-The existence of these two implementation classes is invisible to clients.  
-Clients neither know nor care about the class of the object they get back from the factory; they care only that it is some subclass of the class

**Might need to look into it**

5.The class of the returned object need not exist when the class containing the method is written. [PAGE 26]

-Flexible static factory methods form the basis of service provider frameworks, like the Java Database Connectivity API.  
-A service provider framework is a system in which providers implement a service, and the system makes the implementations available to clients, decoupling the clients from the implementations
-There are three essential components in a service provider framework.
	1. Service Interface: which represents an implementation.
	2. Provider Registration API: which providers use to register implementations.
	3. Service Access API: which clients use to obtain instances of the service. 
-Service Access API: may allow clients to specify criteria for choosing an implementation. If no criteria is provided, it retirns an instance of a default implementation or allows the client to cycle through all available implementations. It is a static factory that forms the basis of the service provider framework. 
	4. Service  Provider Interface: which describes a factory object that produce instances of the service interface. 
-In the absense of a service provider interface, implementations must be instantiated reflectively. 

LIMITATIONS of static factory methods: [PAGE 26]

1. Classes without public or protected constructors cannot be subclasses. [PAGE 26]

-It is impossible to subclass any of the convenience implementation classes in the Collections Framework. 
-It encourages programmers to use composition instead of inheritance. 

2. They are hard for programmers to find. [PAGE 26]

-It can be difficult to figure out how to instantiate a class that provides static factory methods instead of constructors. 

- - - Item 2: Consider a builder when faced with many constructor parameters [PAGE 28]

- Static factories and constructors share a limitation: they do not scale well to large numbers of optional parameters. 
-Example:
	Nutrition Facts labels that appear on packaged foods. 
	-Have a few required fields: serving size, servings per container, and calories per serving, etc. 

**Traditionally, programmers have used the telescoping constructor pattern, in which you provide a constructor with only the required parameters, another with a single optional parameter, a third with two optional parameters, and so on, culminating in a constructor with all the optional parameters.  [PAGE 28-29]
-When you want to create an instance, you use the constructor with the shortest parameter list containing all the parameters you want to set. 
-The telescoping constructor pattern works, but it is hard to write client code when there are many parameters, and harder still to read it. 
-Long sequences of identically typed parameters can cause subtle bugs. 
-If the client accidentally reverses two such parameters, the compiler won't complain, but the program will misbehave at runtime.
- A second alternative when you're faced with many optional parameters in a constructor is the JavaBeans pattern, in which you call a parameterless constructor to create the object and then call setter methods to set each required parameter and each optional parameter of interest. (example) [PAGE 30]
-This pattern has none of the disadvantages of the telescoping constructor pattern.  It is easy, if a bit wordy, to create instances, and easy to read the resulting code. 
-a JavaBean may be in an inconsistent state partway through its construction. 
	-The class does not have the option of enforcing consistency merely by checking the validity of the constructor parameters. 
-the JavaBean pattern precludes the possibility of making a class immutable and requires added effort on the part of the programmer to ensure thread safety. 
-It is possible to reduce these disadvantages by manually "freezing" the object when its construction is complete an not allowing it to be used until frozen, but this variant is unwieldy and rerely used in practice.
-A third alternative combines the safety of the telescoping constructor pattern with the readability of the JavaBeans pattern: Builder Pattern.
-Instead of making the desired object directly, the client calls a constructor (or static factory) with all of the required parameters and gets a builder object. 
-Then the client calls sett-ike methods on the builder object to set each optional parameter of interest. 
-Finally, the client calls a parameterless build method to generate the object, which is typically immutable. 
-The builder is typically a static member class it builds.  example: [PAGE 31]
-The builder pattern simulates named optional parameters. 
-To detect invalid parameters as soon as possible, check parameter validity in the builder's constructor and methods. 
-The builder pattern is well suited to class hierarchies, use parallel hierarchy of builders, each nested in the corresponding class.  [PAGE 35]
-A minor advantage of builders over constructors is that builders can have multiple varags parameters because each parameter is specified in its own method. 
-The builder pattern is flexible: a single builder can be used repeatedly to build multiple objects. 
-The builder pattern has disadvantages as well
	-In order to create an object, you must first create the builder, it could be problematic in performance-critical situations. 
	-The builder pattern is more verbose than the telescoping constructor pattern, so it should be used only if there enough parameters to make it worth it. 
-The builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters. 

- - - Item 3: Enforce the singleton property with a private constructor or an enum type

- A singleton is simply a class that is instantiated exactly once Singletons typically represent either a stateless object such a function or a system component that is intrinsically unique. 
-Making a class a singleton can make it difficult to test its clients. 
-To common ways to implement singletons:
	1. the member is a final field. 
	2. the public member is a static factory method. 
-The main advantage of the public field approach is that the API makes it clear that the class is a singleton: the public static field is final. 
-Advantages of the static factory approach: it gives you the flexibility to change your mind about whether a class is a singleton without changing its API, you can write a generic singleton factory, a method reference can be used as a supplier. [PAGE37]
	-All other times, use the public field approach. 




	





-
