Chapter 1:
-Java support four kinds of types:
	1. Interfaces (including annotations)
	2. Classes (including enums)
	3. Arrays
	4. Primitives
-A class's members consist of its fields, methods, member classes, and member interfaces. 
-A method's signature consists of its name and the types of its formal parameters; the signature does NOT include the method's return type
-This book does not use the term: inheritance. Instead it states that a class implements an interface or that one interface extends another. 
-The term: exported API, or API (application programming interface), refers to the classes, interfaces, constructors, members, and serialized forms by which a programmer accesses a class, interface, or package. 
-A programmer who writes a program that uses an API is referred to as a user of the API, whereas a class whose implementation uses an API is a client of the API
-Classes, interfaces, constructors, members, and serialized forms are collectively known as API elements. 
-In Java 9, a module system was added to the platform-- if a library makes use of the module system, its exported API is the union of the exported API's of all the packages exported by the library's module declaration. 

Chapter 2:
**This chapter concerns creating and destroying objects, when and how to create them, when and how to avoid creating them, how to ensure they are destroyed in a timely manner, and how to manage any cleanup actions that must precede their destruction**

Item 1: Consider static factory methods instead of constructors
-A class can provide a public static factory method, which is simply a static method that returns an instance of the class. 

Advantages of static factory methods:

1. Unlike constructors they have names

-BigInteger(int, int, Random) ---> BigInteger.probablePrime. 
-A class can only have a single constructor with a given signature. (**A bad idea is to provide two constructors whoe parameter lists differ only in the order of the parameter types: it's hard to remember)
-Factory methods don't share the restriction because they have names. 

2. Unlike, constructors, they are not required to create a new object each time they're invoked. 




-
