Effective Java Notes:
Nicole Beck

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
[Chapter 2]:

Consider Static Factory Methods Instead of Constructors:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-One advantage is they have names
	-Constructors do not and one has to differentiate via parameters
	-This can be confusing and lead to errors
-A class can have only one constructor with a given name
	-Don't change order of constructor parameters to differentiate 
-Static factory methods don't have to create a new object
	-Constructors always do
	-Maybe there's an object already created that works
	-Helps with immutable classes and pre-constructed instances
-Singletons, flyweights, non-instantiable. 
-Can return a subtype
	-java.util.collections contain all static methods that work on many types
	-Polymorphic
	-addAll, binarySearch, disjoint, frequency, min, max, sort, shuffle, reverse,...
	-Type returned can be non-public
	-Can vary implementation
-Returned class need not exist at the time the class is written
	-Allows run-time specification
	-JDBC an example

Service-Provider Framework:
* * * * * * * * * * * * * *
-Service interface
-Provider registration
-Service access
-Optional service provider interface
	-Factory to create service provider

Java 6: -General-purpose java.util.ServiceLoader (So you don't have to write your own)

Disadvantages of Static Factory Methods Instead of Constructors:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Classes without public or protected constructors cannot be sub-classed
-Not called out in Javadoc
-Popular Java static factory names
	-valueOf, getInstance, newInstance, getType,... (style guides)

Consider a Builder when faced with many Constructory Parameters (decorator):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-If a class has many fields that need initializing, constructors often chained/telescoped
example of "telescoping":
	public class NutritionFacts {
		private final int servingSize;
		private final int servings;
		private final int calories;
		private final int fat;
		private final int sodium;
		private final int carbohydrate;
		
		public NutritionFacts(int servingSize, int servings) {
			this(servingSize, servings, 0);
		}
		public NutritionFacts(int servingSize, int servings, int calories) {
			this(servingSize, servings, calories, 0);
		} ... etc.

^^^Bad form
-You could instead create an empty instance and have many set()s
	-Problem: instance in inconsistent state
-Builder Pattern
-build() is a parameter-less static method
-Required parameters passed in to constructor
	-Optionals set()
	-Other languages have optional parameters instead
	
Example of the Builder pattern per last example:

		private int calories = 0;
		private int fat = 0;
		private int carbohydrates = 0;

		public Builder(int servingSize, int servings) {
			this.servingSize = servingSize;
			this.servings = servings;
		}
		public Builder calories(int val) {
			calories = val;
			return this; // Returns one of itself
		} ... etc.
		private NutritionFacts(Builder builder) {
			servingSize = builder.servingSize;
			servings = builder.servings;
			calories = builder.calories;
			fat = builder.fat;
			sodium = builder.sodium;
		}
		public static void main(String[] args) {
			NutritionFacts cocaCola =new NutritionFacts.Builder(240,8).
			calories(100).sodium(35).carbohydrate(27).build();
		}

Builder for Class Hierarchies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

New York Pizza example:

public abstract class Pizza {
	public enum Topping { HAM, MUSHROOM, ONION, PEPPER, SAUSAGE }
	final Set<Toppings> toppings;
	
	abstract static class Builder <T extends Builder <T>> {
		EnumSet<Topping> toppings = EnumSet.nonOf(Topping.class);
		public addTopping(Topping topping) {
			toppings.add(Objects.requireNonNull(topping));
			return self();
		}
		abstract Pizza build();
		protected abstract T self();
	}
	Pizza(Builder<?> builder... [missed it.] 

Enforce the Singleton Property with a Private Constructor or an Enum Type:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Private No-Arg Constructor

public class Elvis {
	public static final Elvis INSTANCE = new Elvis ();
	
	private Elvis() {}

	public void leaveTheBuilding() {
		System.out.println("Whoa baby, I'm outta here!");
	}
	public static void main(String[] args) {
		Elvis elvis = Elvis.INSTANCE;
		elvis.leaveTheBuilding();
	}
}

Static Factory:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

public class Elvis {
	private static final Elvis INSTANCE = new Elvis();
	private Elvis () {}
	public static Elvis getInstance() {
		return INSTANCE;
	}

Enumeration:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

public enum Elvis {
	INSTANCE;

	public void leaveTheBuilding() {
		System.out.println("Whoa baby, I'm outta here!");
	}
	public static void main(String[] args) {
		Elvis elvis = Elvis.INSTANCE;
		elvis.leaveTheBuilding();
	}
}

Enforce Non-Instantiability with Private Constructor:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Just have a private no-args constructor
	-If have any no-args constructor, the default isn't created
-Class cannot be sub-classed
	-Sub-classes would need to call constructory
-Might want to have constructor throw an AssertionError (Just to be safe)


***MISSED SOME THINGS***

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
[CHAPTER 3]:

So?
-There is no way to extend an instantiable class and add a value while preserving the equals contract

Consistency:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Do not wrtie an equals method that depends on unreliable resources
-Java's URL equals relies on IP address comparison
	-What happens when not on network?
	-What happens when network addresses change?

Recipe:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Check for object == this
-Use instanceOf to check for correct type
-Cast argument to correct type
-Test == for all significant fields
	-Except for Float.compare, Double.compare, and Arrays.equal
-Also ovverride hashCode
-Use @Override (make sure you actually are using the signature method)

Always Override hashCode when you Override equals:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-When invoked on the same object, and the object hasn't changed to affect equals, always return the same integer
	-Does not have to be the same integer from runtime to runtime
-If two objects are equals, both hashCodes must be the same
-If they are not equals, it is not required to product distinct hashCodes
	-If not, hash table performance can be affected
	-"return 42" is legal, but horrible (everything will always collide)
-Don't rely on hashcodes, sometimes unsafe. 
-Creating a hashCode (How Java does it)
	-Set result = 17
	-For all the fields
		-If boolean, c = f ? 1:0
		-If byte, char, short, or int, c = (int) f
		-If long, c = (int)(f^(f>>>32))
		-If float, c = Float.floatToIntBits(f)
		-If double, c = (int)(Double.doubleToLongBits(f)^.... **missed it**
-Update result = 31 * result + c
-Exclude any redundant fields
	-Which you shouldn't have
-Ignore any fields ignored by equals

Creating a hashCode:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

	public final class PhoneNumber {
		private final short areaCode;
		private final short prefix;
		private final short lineNumber;
		private volatile int hashCode;

	//Lazy initialization
	@Override public int hashCode() {
	.....missed it

-If two things are .equals, their hashCodes must also be the same
	-If hashing is really fast, and equals is really slow, maybe you call them inside eachother
	-But really you have to call them both

Always Override toString:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

	-Makes class much more pleasant to use
	-Whe practical, toString should return all interesting information in object
	-One has to choose the format returned 
		-Good idea to create a constructor or static factory that takes string representation and creates object
	-Provide access to values in toString via getters
		*lombok (toString, EqualsAnd HashCode)

Override clone Judiciously: (DON'T DO IT)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Creates and returns a copy of an object
	-x.clone() ! = x
	-x.clone().getClass() == x.getClass()
	-x.clone().equals(x)
	-Constructors are not called
-Don't clone an immutable object
-Instead, you can provide a copy constructor or factory
-Interfaces should not extend Cloneable
-Classes designed for inheritance should not implement it

Consider Implementing Comparable:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Similar to equals
	-But provides ordering information
	-Is generic
	-Useful in e.g. Arrays.sort()
-Returns comparison between two objects
	- -1 if first less than second
	- 0 if equal to 
	- 1 if first greater than second

Compare versus Equals:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
**Missed it**

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
[CHAPTER 4]:

Minimize the Accessibility of Classes and Members:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Encapsulation
-Decouples modules allowing them to be developed, tested, optimized, used, understood, and modified in isolation
-"The single most important factor that distinguishes a well-designed module from a poorly-designed one is the degree to which the module hides its internal data and other implementation details from other modules"
-Make each class or member as inaccessible as possible
-If used nowhere else, nest a class within the class that uses it
-Don't make any variable/field/attribute public
	-At worst, make it package-private
-Try to avoid protected too
	-Must always support
	-Exposes implementation detail to subclasses
	-Should be rare
-If a method overrides a superclass method, it must have the same access level
	-To not violate the Liskov inversion principle
-Implementing an interface requires all methods to be public
	-Implicit in implementing an interface
-Instance fields should never be public
	-Limits typing
	-Limits invariants
	-Are not thread-safe
-Arrays are always mutable
	-Never have a public static final array field
	-Or an accessor that returns such a beast
	-Be careful of IDE's that create accessors automatically
**if you are returning an array, return the copy of the array, for security

In Public Classes, use Accessor Methods, not Public Fields:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Book still insists on using lame examples of sets instead of simply making fields public
	-With the ostensible argument that we can change internal representation
		-But we never do
		-And if we do, we break the preexisting API contract
	-Less harmful if immutable

Minimize Mutability:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-All information provided at construction
-Any changes result in new objects
	-Which is in general true
-Don't provide methods that modify an object's state
	-Mutators
-Ensure class cannot be extended (make them final)
	-Subclasses can't change intent 
	-Unless you truly want to extend the class
-Make all fields final
-Make all fields private
-Ensure client cannot obtain references to mutable data
	-Don't use client-provided reference
	-Don't return direct object reference
	-Make defensive copies
-Immutable objects are simple
	-Always the same behavior
	-Never global data
-Immutable objects are thread-safe
	-Implicitly parallelizable
	-No synchronization needed

**Python is horrible for threading, Scala is probably the best for threading**

-Only possible downside is the need for an object for each value 
	-But: objects are in general cheap
	-Are you sure it's inefficient?
-"Classes should be immutable unless there is a very good reason to make them mutable"
	-At the very least, from an external point of view
-If cannot be immutable, limit mutability as much as possible
	-Make every field final unless there is a compelling reason not to

Favor Composition over Inheritance:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-GO4
-Inheritance violates encapsulation
	-Subclass depends on superclass's implementation

Implementation Details:

import Java.util.Arrays;
import Java.util.Collection;
import java.util.HashSet;

public class InstrumentedHashSet <E> extends HashSet <E> {
	private int addCount


**missed it***


Compose Instead:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-An InstrumentedHashSet HAS A HashSet instead of extending a HashSet
	-And extends a ForwardingSet class
-Have methods forward to the referenced type
-These are WRAPPER classes
	-AKA decorator classes

Inheritance:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Is-A relationship
-Is every instance of a subclass really an instance of the superclass?
	-If not, have a private instance of the referred-to class

Designing and Document for Inheritance:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-The only way to test a class designed for inheritance is to write a subclasses
-Constructors must not call over-ridable methods
	-Directly or indirectly
	-A superclass constructor runs before a subclass constructor, so any subclass methods that are overridden will be called before constructor called

**Some java examples that I didn't type**

-Final Data field has two different states
-Not a null pointer exception because println checks carefully
-One has to be very careful when creating classes for sub-classing
	-One way is to make class final
	-Other is to provide no public or package-private constructors

Prefer Interfaces to Abstract Classes:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Classes force inheritance
	-Java is single inheritance
-Existing classes can be easily changed to implement interface
-Interfaces are ideal for defining mixins
	-Loosely, a mixin is an additional type for a class
	-Useful for polymorphism
	-Know what methods are available to client, which in general define a type
-Can create skeletal implementation for each interface
	-Generally call AbstractInterface(SkeletonInterface might be better)
	-AbstractCollection, Map, List, Set
-Abstract classes do permit multiple implementations
	-Easier to evolve
	-If you want to add a method, can add and implement
	-Everything else still works
-Once an interface is released, much more difficult to change
	-Requires all dependent class...

**Use Interfaces Only to Define Types**

Prefer Class Hierarchies to Tagged Classes:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Verbose, error-prone, and inefficient
-**Missed it**
-Often when you're diving into switches, you may want to see why you're using them

-**if you believe your program is too slow, run it through a _____________. Write the clearest code you can and then figure out why it is slow. 

Use Function Objects to Represent Strategies
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Java didn't have method references
-Trailing edge
-**Missed it**

Favor Static Member Classes Over Non-Static:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-A nested class is defined within another class (Hide as much as possible)
-Only serves the enclosing class
-Four kinds:
	-Static (not dynamic, not an inner class)
	-Non-Static
	-Anonymous
	-Local
-Last three are called inner classes
-For example, in a linked list, nodes do not need to refer to head, tail, etc., from a list class
-No need for node to contain all the data in list, so it can be a static member class
-One way to think of this is that the static member calss could be a separate class, but the code reads better with it inside

Anonymous Classes:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Have no names
-Not a member of enclosing class
-Declared and instantiated at the same place
-**Missed it**
-In more modern Java we use a lambda (An anonymous method)

Anonymous Inner Class:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

**Example**

Local Class:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

public void myMethod() {
	class LocalClass implements Runnable {
		public void run() {
			System.out.println("Child Thread");
		}
	}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
[CHAPTER 5]:

Typing:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Java's type system is very complex
-It add various mechanisms to add "generics"
-Other lanugages simply have references to objects and duck typing

Generic Types:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Generic classes and interfaces are known as generic types
-Generic types define sets of parameterized types
-.equals always takes in a capital O Object, but generally you don't use Object

Unbounded Wildcard:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-<?> (This represents an unbounded wildcard)

Prefer Lists to Arrays:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Arrays are covariant
	-If sub is a subtype of super, sub[] is a subtype of super[]
-Generics are invariant
	-List<t1> is never a subtype of List<t2>

Covariance:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
**prefer compile errors vs. runtime errors. 

Arrays Versus Generics:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Arrays are reified
	-Their element types are enforced at runtime
-Generics are implemented by type erasure
	-Types enforced at compile time and erase type at run time
-Cannot create arrays of generic types, parameterized types, or type parameters

Favor Generic Methods:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
**Sets must contain elements of the same type

Bounded Wildcards: (?)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-List<String> is not a subtype of List<Object>
-However, every object is a subtype of itself
-So, can have a parameter that "extends" a generic 
-And have a parameters that is a supertype.. **Missed it

Producers and Consumers: (extends) (super)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

When to Use:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
-Use bounded wildcards in methods that have producer or consumer parameters
	-Maybe not a great idea anyway
-PECS: Producer/Extends, Consumer/Super
-**Missed it***
-Instead of this look into Java streams

**in general generic parameters are great, but wildcard types are difficult to understand**

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
[CHAPTER 6]:

Use Enumerations Instead of Integer Constants:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Java:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Java's Enumerations are more powerful than other languages'
-Almost Classes
	-Can't extend, but can implement an interface
-Export one instance of each enumeration via a public static final field
-Enum are final
	-Only one instance
-Provide compile-time type safety
-Can't pass or assgn incorrectly

Enumerations:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Don't count on ordinal values
-Use constructor instead
-Use EnumSets instead of bit fields

Annotations:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Prefer Annotations to Naming Patterns
	-JUnit a major example
-Consistently use @Override
	-Makes sure you are actually overriding
	-Especially for equals, toString, hashCode

Use Marker Interfaces to Define Types:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-A marker interface is one with no methods
-Serializable is an example
	-Indicates object can be written via ObjectOutputStream

Upon Reflection:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-reflection is the ability of a computer program to examine, introspect, and modify its own structure and behavior at runtime
-allows inspection of classes, interfaces, fields and methods at runtime
-it also allows instantiation of new objects and invocation of methods
-Reflection is often used as part of software testing, such as for the runtime creation/instantiation of mock objects
-JUnit,Spring (a web framework), Struts, Hibernate (an object relational framework)
-Information on 
	-Classes and inheritance
	-Methods (and constructors)
	-Fields
	-Modifiers
-Can call
	-Methods (and constructors)
-Can change fields and modifiers
-Can't add/delete classes, fields, or methods
-import java.lang.reflect.Modifier;...
	public class Reflect
	classes.. abstract class... main-->throws exceptions
-Very powerful, but has security concerns
-If you're writing a framework you have to use reflection
-In general modifying the final variables of an object behind its back is a bad idea.

Check Parameters for Validity:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-most parameters have restrictions on their validity
	-positive, non-null, zero-length, etc. 
-AKA preconditions
-Program defensively
-Catch problems as soon as possible 
-Fail fast
-Method may die
	-Or worse, work but in an expected way
-Throw an exception
	-An illegalArgumentException a good choice

Assertions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Optional in Java
	-Must enable with -ea
	-Or in first class (and doesn't enable them there):
	static {
		ClassLoader.getSystemClassLoader().
		setDefaultAssertionStatus(true);
	}

Check Parameters for Validity
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
-Important for maintaining object consistency
	-Values stored for later use must be good
	-Checks in constructors important
-Check before doing any calculation
	-Unless calculation does the checks for you

Make Defensive Copies
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Assume the worst of your class's clients
	-They will modify your invairents

Immutable?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Design Method Signatures Carefully:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Good names
-Short parameter lists
	-If all identical, maybe use varargs

public class Sum {
static int sum(int ...a) {  <-- this is a little dangerous, in general
	int some = 0;

	for (int i: a) {
		some +=1;
	}

	return some;
}

Short Parameter Lists:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Maybe pass a class that encapsulates multiple parameters
-Maybe use the builder pattern
-Prefer interfaces for parameters
-Avoid Booleans, favor enumerations

Use Overloading Judiciously:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Overloading happens at compile time
-Here, there was an array of Collection <?>
-Overloading is static, overriding is dynamic

Don't Return Nulls:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
-You probably want to return an exception

Write Good JavaDoc Documentation
	-For all your visible items

Lambdas and Streams:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Prefer Lambdas to Anonymous Classes:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-For example strategy patterns
-Used to use anonymous classes
-Java 8 introduced functional interfaces
	-Lambda expressions
	-Method references
-Historically: we had to create an anonymous class, but it's a little painful, but all we really want is the function
-Lambdas ("->")
-Method Reference ("String :: length")
-Example in book:
	import java.util.function.DoubleBinaryOperator;
		public enum Operation {
			PLUS ("+", (x,y) -> x + y),
			MINUS ("-", (x,y) -> x -y),
-"First Class Objects"
-A lambda should only be run in a single curly brace
-Equivalent (we would prefer to use method references to lambdas)

Types:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Static
-Bound
	-Receiving objects specified in method reference
-Unbound
	-Receiving object specified in lambda parameter
-Constructors for classes and arrays

Bound:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Favor the Use of Standard Functional Interfaces
-43 total
-5 basic types
-Operator
	-Results and arguments the same type
-Predicate
	-Returns a boolean
-Function
	-Arguments and return types differ
-Supplier
	-Takes no arguments but returns a value (python: generators)
-Consumer
	-Takes arguments but returns nothing

Predicate:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Predicate<String> isALongWord = t -> t.length() > 10;
System.out.println(isALongWord.text("successfully")); // true

Supplier:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

IntStream.range(0,4).parallel().forEach(System.out::println);
/*
0
1
2
3
4
*/

Filer,Map,Peek:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Stream.of("one", "two", "three", "four")
	.filter(e -> e.length() > 3) 
	.peek(e -> System.out.println("Filtered value: " + e)) 
	.map (String :: toUpperCase)
	.peek(e -> System.out.println("Mapped value: " + e))
	.collect(Collectors.toList());
/*
Filtered value: three
Mapped value: THREE
Filtered value: four
Mapped value: FOUR
*/

Supplier/Generator:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

IntStream.iterate(0, i -> i +2)
	.limit(3)
	.forEach(System.out:: println);

IntStream.generate(() -> ThreadLocalRandom.current().nextInt(10)

Favor the Use of Standard Functional Interface
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-UnaryOperator - T apply(T t)
	-String:: toLowerCase
-BinaryOperator -T apply(T t1, t2)
	-BigInteger::add
-Predicate -Boolean Test(T t)
	-IsEmpty

Use Streams Judiciously
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Stream - sequence of data elements
-Pipeline - multistage computation on elements
-Source, intermediate operations, terminal operation
-Executed lazily (a for loop will be executed no matter what)
-Fluent - chained into a single statement
-Sequential by default
	-Can add .parallel
-Best for transforming, filtering, combining, accumulating, searching a series of data

try (Stream <String> words = Files.lines(dictionary)) {
	words.collect(groupingBy(word - > alphabetize(word)))
	.values()
	.stream()
	.filter(group -> group.size() >= minGroupSize)
	.forEach(g-> System.out.println(g.size()...

Use Caution when Making Stream Parallel
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Doesn't work well with Stream.iterate or .limit
-Does work well with ArrayList, HashMap, HashSet, arrays, int and long ranges
-Best if terminal operation is a reduction (reduce is take two items and add them together)

Method Reference in Map:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

import java.util.Map;
import java.util.HashMap;

class Test {
	public static void main(String[] args) throws Exception {
	Map<Character, Runnable> commands = new HashMap<>();

	commands.put('h', () -> System.out.println("Help"));

**Very important to know what a lambda, Stream, and Reference Method is useful and how they're used appropriately**

[CHAPTER 10]

Exceptions:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Use Exceptions only for Exceptional Conditions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-A well-designed API must not force its clients to use exceptions for ordinary control flow

-Use Checked Exceptions for Recoverable Conditions
	-Three kinds of throwables
		-Checked Exceptions
		-Runtime Exceptions
		-Errors
-Checked exceptions require client to catch or propagate

Runtime Exceptions and Errors:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Mostly for precondition violations
-Use runtime exceptions for programming errors
	-ArrayIndexOutOfBoundsException

-Errors for JVM issues
	-E.g.:resource deficiencies
-Don't subclass Error
-Don't throw any except AssertionError

Avoid Unnecessary Use of Checked Exceptions:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Create state-testing methods
	-But beware of threading "check and act" race conditions
	-if (o.isValid()) {
	o.get()
	}

Favor the use of Standard Exceptions:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-E.g.:IllegalArgumentException

Throw Exceptions Appropriate to the Abstraction:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Catch lower-level exceptions and throw more appropriate exception

Document all Exceptions thrown by each Method:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Declare all checked exceptions individually
-Document precisely the conditions one is thrown
-Use @throws for checked, but not for unchecked

Include Failure-Capture Information in Detail Message

-Include the values of all parameters and fields...

Strive for Failure Atomicity:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Failed method should leave the object in the state it was prior to the invocation
-Check before using parameters

Don't ignore Exceptions:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Don't have empty catch blocks
-If you do, comment!

Regular Expressions:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Introduction:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-Very useful for matching patterns in text etc.
-Also widely used, sometimes in a limited form, for matching filenames
	-"Globbing"

-Some people when confronted with a problem think "I know, I'll use regular expressions."... missed it. 

Quantifiers Exercise:
re.search('^a+b?$', 'aaaa')
{} + * ---These are ranges
. 
^ $ ? ---These are anchors

\< 
\>
\b

Web Crawlers:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-A web crawler, sometimes called... missed it. 
-WGET
-CURL
-Go out and find web pages and download them and use whatever to manipulate them 

Replicant:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-A replicant is a fictional bioengineered or biorobitic android

REplican:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

-a web replicator based on regular expressions
-Regular expressions allow either great specificity or generality, giving you a lot of power to retrieve whatever you wish from 
