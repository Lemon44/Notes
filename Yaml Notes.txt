PyYaml Documentation overview:

install using pip install PyYaml

**By default, PyYaml chooses the style of collection based on if it has nesting collections. 
    If it doesn't have nesting collections, it will be assigned the flow style and not the block style. 

If you always want the collections to be serialized in the block style, set the parameter default_flow_style of dump() to False. 

-- print yaml.dump(yaml.load(document), default_flow_style = False)

Importing Yaml:
    -It is not safe to call yaml.load with any data received from an untrusted source! 

yaml.load() converts a Yaml document to a Python object. 
    -it returns a python object

If a string or a file contains several documents, you may load them all with the yaml.load_all() function. 

You can construct the instance of a python class by using the ! !python/object tag. 

>>>>>> class Hero:
...     def __init__(self, name, hp, sp):
...         self.name = name
...         self.hp = hp
...         self.sp = sp
...     def __repr__(self):
...         return "%s(name=%r, hp=%r, sp=%r)" % (
...             self.__class__.__name__, self.name, self.hp, self.sp)

>>> yaml.load("""
... !!python/object:__main__.Hero
... name: Welthyr Syxgon
... hp: 1200
... sp: 0
... """)

Hero(name='Welthyr Syxgon', hp=1200, sp=0)

You can make a python object safe and thus recognized by yaml.safe_load.
-You first have to derive it from yaml.YAMLObject and explicitly set its class
property yaml_loader to yaml.SafeLoader. 

Dumping Yaml:

the yaml.dump() function accepts a python object and produces a Yaml document

print yaml.dump()
      yaml.dump_all()

Dumping instances of a python class:

    >>> class Hero:
...     def __init__(self, name, hp, sp):
...         self.name = name
...         self.hp = hp
...         self.sp = sp
...     def __repr__(self):
...         return "%s(name=%r, hp=%r, sp=%r)" % (
...             self.__class__.__name__, self.name, self.hp, self.sp)

>>> print yaml.dump(Hero("Galain Ysseleg", hp=-3, sp=2))

!!python/object:__main__.Hero {hp: -3, name: Galain Ysseleg, sp: 2}

Constructors, representor, resolvers:

    You may define your own application-specific tags.  
    The easiest way to do it is to define a subclass of yaml.YAMLObject:
    
    >>> class Monster(yaml.YAMLObject):
...     yaml_tag = u'!Monster'
...     def __init__(self, name, hp, ac, attacks):
...         self.name = name
...         self.hp = hp
...         self.ac = ac
...         self.attacks = attacks
...     def __repr__(self):
...         return "%s(name=%r, hp=%r, ac=%r, attacks=%r)" % (
...             self.__class__.__name__, self.name, self.hp, self.ac, self.attacks)

TAGS:

YAML tag	            Python type
Standard YAML tags	
!!null	                None
!!bool	                bool
!!int	                int or long (int in Python 3)
!!float	                float
!!binary	            str (bytes in Python 3)
!!timestamp	            datetime.datetime
!!omap, !!pairs	        list of pairs
!!set	                set
!!str	                str or unicode (str in Python 3)
!!seq	                list
!!map	                dict
Python-specific         tags	
!!python/none	        None
!!python/bool	        bool
!!python/bytes	        (bytes in Python 3)
!!python/str	        str (str in Python 3)
!!python/unicode	    unicode (str in Python 3)
!!python/int	        int
!!python/long	        long (int in Python 3)
!!python/float	        float
!!python/complex	    complex
!!python/list	        list
!!python/tuple	        tuple
!!python/dict	        dict

The yaml package:

----------------------------------------------
scan(stream, Loader=Loader)
scan(stream) scans the given stream and produces a sequence of tokens.

parse(stream, Loader=Loader)

emit(events, stream=None, Dumper=Dumper,
    canonical=None,
    indent=None,
    width=None,
    allow_unicode=None,
    line_break=None)
parse(stream) parses the given stream and produces a sequence of parsing events.

emit(events, stream=None) serializes the given sequence of parsing events and writes them to the stream. 
    if stream is None, it returns the produced stream.

compose(stream, Loader=Loader)
compose_all(stream, Loader=Loader)

serialize(node, stream=None, Dumper=Dumper,
    encoding='utf-8', # encoding=None (Python 3)
    explicit_start=None,
    explicit_end=None,
    version=None,
    tags=None,
    canonical=None,
    indent=None,
    width=None,
    allow_unicode=None,
    line_break=None)
serialize_all(nodes, stream=None, Dumper=Dumper, ...)
compose(stream) parses the given stream and returns the root of the representation graph for the first document in the stream. 
    If there are no documents in the stream, it returns None.

compose_all(stream) parses the given stream and returns a sequence of representation graphs corresponding to the documents in the stream.

serialize(node, stream=None) serializes the given representation graph into the stream. 
    If stream is None, it returns the produced stream.

serialize_all(node, stream=None) serializes the given sequence of representation graphs into the given stream. 
    If stream is None, it returns the produced stream.

load(stream, Loader=Loader)
load_all(stream, Loader=Loader)

safe_load(stream)
safe_load_all(stream)

dump(data, stream=None, Dumper=Dumper,
    default_style=None,
    default_flow_style=None,
    encoding='utf-8', # encoding=None (Python 3)
    explicit_start=None,
    explicit_end=None,
    version=None,
    tags=None,
    canonical=None,
    indent=None,
    width=None,
    allow_unicode=None,
    line_break=None)
dump_all(data, stream=None, Dumper=Dumper, ...)

safe_dump(data, stream=None, ...)
safe_dump_all(data, stream=None, ...)
load(stream) parses the given stream and returns a Python object constructed from for the first document in the stream. 
    If there are no documents in the stream, it returns None.

load_all(stream) parses the given stream and returns a sequence of Python objects corresponding to the documents in the stream.

safe_load(stream) parses the given stream and returns a Python object constructed from for the first document in the stream. 
    If there are no documents in the stream, it returns None. 
    safe_load recognizes only standard YAML tags and cannot construct an arbitrary Python object.

A python object can be marked as safe and thus be recognized by yaml.safe_load. 
To do this, derive it from yaml.YAMLObject (as explained in section Constructors, representors, resolvers) and explicitly set its class property yaml_loader to yaml.SafeLoader.

safe_load_all(stream) parses the given stream and returns a sequence of Python objects corresponding to the documents in the stream. 
    safe_load_all recognizes only standard YAML tags and cannot construct an arbitrary Python object.

dump(data, stream=None) serializes the given Python object into the stream. 
    If stream is None, it returns the produced stream.

dump_all(data, stream=None) serializes the given sequence of Python objects into the given stream. 
    If stream is None, it returns the produced stream. Each object is represented as a YAML document.

safe_dump(data, stream=None) serializes the given Python object into the stream. 
    If stream is None, it returns the produced stream. safe_dump produces only standard YAML tags and cannot represent an arbitrary Python object.

safe_dump_all(data, stream=None) serializes the given sequence of Python objects into the given stream. 
    If stream is None, it returns the produced stream. Each object is represented as a YAML document. 
    safe_dump_all produces only standard YAML tags and cannot represent an arbitrary Python object.

def constructor(loader, node):
    # ...
    return data

def multi_constructor(loader, tag_suffix, node):
    # ...
    return data

add_constructor(tag, constructor, Loader=Loader)
add_multi_constructor(tag_prefix, multi_constructor, Loader=Loader)
add_constructor(tag, constructor) specifies a constructor for the given tag. 
    A constructor is a function that converts a node of a YAML representation graph to a native Python object. 
    A constructor accepts an instance of Loader and a node and returns a Python object.

add_multi_constructor(tag_prefix, multi_constructor) specifies a multi_constructor for the given tag_prefix. 
    A multi-constructor is a function that converts a node of a YAML representation graph to a native Python object. 
    A multi-constructor accepts an instance of Loader, the suffix of the node tag, and a node and returns a Python object.

def representor(dumper, data):
    # ...
    return node

def multi_representor(dumper, data):
    # ...
    return node

add_representor(data_type, representor, Dumper=Dumper)
add_multi_representor(base_data_type, multi_representor, Dumper=Dumper)
add_representor(data_type, representor) specifies a representor for Python objects of the given data_type.

    A representor is a function that converts a native Python object to a node of a YAML representation graph. 
    A representor accepts an instance of Dumper and an object and returns a node.

add_multi_representor(base_data_type, multi_representor) specifies a multi_representor for Python objects of the given base_data_type or any of its subclasses. 
    A multi-representor is a function that converts a native Python object to a node of a YAML representation graph. 
    A multi-representor accepts an instance of Dumper and an object and returns a node.

add_implicit_resolver(tag, regexp, first, Loader=Loader, Dumper=Dumper)
add_path_resolver(tag, path, kind, Loader=Loader, Dumper=Dumper)
add_implicit_resolver(tag, regexp, first) adds an implicit tag resolver for plain scalars. 

    If the scalar value is matched the given regexp, it is assigned the tag. first is a list of possible initial characters or None.

add_path_resolver(tag, path, kind) adds a path-based implicit tag resolver. 
    
    A path is a list of keys that form a path to a node in the representation graph. Paths elements can be string values, integers, or None. 
    The kind of a node can be str, list, dict, or None.
----------------------------------------------
