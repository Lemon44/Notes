Getting a Job:

The Great American Know Who:

-I've known people at many jobs I've landed
-Networking helps
#1's 
-Maintaining your GPA is the #1 thing you can do
-Impressing people in you classes is the other #1 thing to do

Linked In:
-Join it!
	-it's free	
	-it's a good way to network
	-they send you jobs that match your skills
	-pulse is usually pretty good (every other week update)
	-recruiters rely on it heavily

Meetup:
-Join it
-Find a meetup that matches your interests in a job
-Pizza and recruiters are usually there
-Talk about things you and they are interested in!
-DJUG (Denver Java Users Group)

Twitter:
-Maybe join it
-Don't just retweet or like 
-Follow those whom you're interested in and see what they tweet 
-Stay up to date 

Stop!
-Gaming 
-Facebooking, Instagramming 
-Watching sports, playing (better)
-Wasting your time 
-Everyone is an expert at something 
    -Choose what it is you're an expert at! 

Start!
-Learning about your field
    -ACM, IEEE 
-Being relatable
    -Be able to interact with the non-geek
-Being nice
-Branching out
    -New languages, etc. 

Why is Anyone Hired?
    -Because someone is willing to pay to have a solution to their problem
    -Be the solution
    -"Are you the solution to the problem?" (Convince them that you have a set of skills that provide the solution)

Do the job before you get the job!
-Do research on the company and the position
-What tech do they use?
-Whom have they bought and been bought by?
-Their strengths and weakness and those of their competitors
-ethics, morals. 

Market Yourself!
-Print up some cards 
    -Include: a non-school email address, your twitter, linked-in, GitHub URLs
-GitHub 
    -Your school work
    -Gists (find out something cool about python)
-Blog
-Create and give a presentation or two
-Write a paper or two

**If the place is too fun, that means the job itself is crummy**

Red Flags:
-"What's your turnover rate?"
-"We are a family"
-Promise of the future (sort of difficult to trust), stock options, etc. 

Resumes
-Your resume will first be filtered by an HR program: be buzzword compliant
-You have ~5 seconds to catch someone's attention
    -Important stuff first
Don't!
    -Put your address: You're willing to commute or WFH
    -Use your school email address 
    -Have a cute email address or funny/gamer GitHub login
    -List your required courses, but DO list your electives
    -List your IDE's
    -Mention desktop applications
    -Put in objectives: your objective is to get a job: Objectives and targeted info can go in a cover letter
    -Never say "references available by request"

Do!
    -Put in your GitHub and LinkedIn URL's
    -List your languages, either in order (or with level) of experience
        -beginner, intermediate, advanced
    -List your substantial school work
    -List Scrum, GitHub, Design Patterns, TDD, Travis (CI/CD), Sonar Cloud
    -Mention Linux
    -Say what you role was and what you actually accomplished 
        -Not what you were "responsible for": NObody cares, you probably didn't do it 
    -Keep it to one page 
    -Be very careful with spelling, grammar, and formatting 
        -Don't change fonts, justification, etc. 
    
Interviewing: Many Kinds

-Typically start with phone screen
-Possibly followed by an online quiz
-May be half- or full day 
-May be interviewed by group 
    -Or individuals
    -Or mix
-Typically have to eat with them
    -Learn some table manners 

Overall:

-Arrive at least 15 minutes early, but enter 8-10 minutes early
-Bring a notepad and make notes if necessary
-Bring extra resumes
-Follow up~ 
	-The same day
	-Say thank, you know how much work it is, if there is anything else you can provide to help

Personal:

-Dress well
-Eye contact: if you don't make eye contact, they don't trust you
-Body language
	-Don't cross your arms or legs
	-Lean in
	-Avoid your nervous habits 
-Don't wear Axe
	-Many people are sensitive/allergic to artificial scents

What you want:

-You're interviewing them as much as they you
	-You don't want to work for just any place
	-Unless you can grit your teeth for a year and build your resume
	-Maybe check out https://www.glassdoor.com/

-"What makes you come to work?" 
-"Why did you choose this place?"
-"Am I capable of lateral movement?"
-"How do you support my professional development?"
-"Do you think I would be a good fit based on the information I've provide you?"
-Working at some places is worse than not working in the field for a time. 
	-Trailing edge technology that traps you
	-A place you can't excel in
	-Churn and burn

Salary Research:
-"I'm sure you're competitive, but I am interested in finding the right fit for myself"

What to Ask:
-Why do you work here?
-What are the working conditions?
-What SE lifecycle is used?
-What is the tool chain?
-HR Questions:
	-How are the benefits?
	-Health, Vacation, Retirement?

Types of Questions:
-Computer Science
-What you've done
-Language and Frameworks

Google Star Method of Interviewing:

Computer Science: 
-Algorithms and data structures
-Big O of algorithms and choosing
-Imperative vs. Functional
-http://www.nerdparadise.com/tech/interview

What You've Done:
-Make sure you did what is on your resume and are ready to talk about it
-They are looking for specifics
-Give concreate examples
-If you don't have an example, say so

Language:
-When would you use an anonymous inner class in Java?
-What's a lambda? (unnamed functions)
	-Know your versions
-What's a closure?

OO:
-What are the major features of OO?
	-Abstraction, encapsulation, inheritance, polymorphism
-What is an interface?
-What is a virtual method? (abstract)
-What is multiple inheritance
-Deep vs. Shallow Copies
-Dependency Inversion/Inversion of control	
	-Frameworks vs. Library (You call a framework a framework calls you...?)
-Design Pattern

Do Me a SOLID:
-S: Single Responsibility Principle
	-classes do one thing
-O: Open-closed Principle
	-open for extension, closed for modification
-L: Liskov substitution Principle
	-Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program
-I: Interface Segregation Principle
	-Many client-Specific interfaces are better than one general-purpose interface
-D: Dependency Inversion
	-**Missed it

Networks:

Software Engineering:
-Git, GitHub
-Agile Manifesto
-TDD
-DRY, YAGNI
-CI/CD

Web:
-MVC
-ORM
-Ajax

Questions:
-Why are manhole covers round?
-What is 2^24?
-How usable addresses in a class C network?
-What are your strengths and weaknesses
	-No kidding
-Why do you want to work here?
-How many trees in the continental states?

Tough Questions:
-They typically will ask a few very difficult questions:
	-To show off
	-To see how you reason
-How many trees are in the CONUS? (continental united state)
-How far away is the moon?
-"I don't know that, but here is how I would approach the problem."

Verbal Hints:
-"We speak not only to tell other people what we think, but to tell ourselves what we think. Speech is part of..." 
	-Oliver Sacks

-Don't say "I feel like"... say, "I think" or "I believe"
-You hopefully mean... "I think" or "I believe"
-No one cares how you feel.
- Try to avoid "like"
	-Unless you're making a simile
-Also "um", "you know", and "got"
-Don't use "literally"
	-Unless you almost always talk figuratively
-Irregardless is not a word: it has never been
	-Regardless is
	-Irrespetive is
-Don't say methodology
	-Nonsensical. 
-The word data is plural: use "are"
-Don't make jokes
	-Few things are universally funny
-Be terse and don't BS

Guerrilla Interviewing
-Looking for smart people who get things done 
-Introduction
-Question about recent project candidate worked on
-Easy Programming Question
-Pointer/Recursion Question
-Do you have any questions?

	-How did I do?
	-Bring a cheatsheet.





























    

