NOTES FOR HEAD FIRST DESIGN PATTERNS 
by: Nicole Beck

. Design Patterns
    - Strategy 
        + Encapsulates interchangeable algorithms/behaviours and uses delegation to decide which one to use 
        + Allows the algorithm to vary independently from the clients that use it.
        + Behavioral Software design pattern 
        + Enables selecting an Algorithm at runtime.
        + Instead of implementing a single algorithm directly, code receives run-time instructions as to which in a family of algorithms to use.
    - Observer
        + Defines a one-to-many dependency between objects so that when one object changes state, 
        + All of its dependents are updated and notified automatically
    - Decorator
        + Wraps another object dynamically and provides additional behaviour for it.
        + Provides a flexible alternative to subclassing for extending functionality.
        + Doesn't alter the interface but adds responsibility
    - Factory method
        + Defines an interface for creating an object, but lets subclasses decide which class to instantiate
        + Lets a class defer instantiation to subclasses 
        ***ABSTRACT 
    - Abstract Factory 
        + Provides an interface for creating families of related or dependent objects without specifying their concrete classes.
    - Singleton
        + Ensures a class has only one instance, and provides a global point of access to it. 
    - Command
        + Encapsulates a request as an object, thereby letting you parameterise other objects with different requests,
        queue or log requests, and support undoable operations.
        + Decouples an obect making a request from the one that knows how to perform it.
    - Adapter
        + Wraps an object and provides a different interface to it.
        + Converts the interface of a class into another interface the clients expect.
        + Lets classes work together that couldn't otherwise because of incompatible interfaces.
    - Facade
        + Wraps a bunch of objects to simply their interface
        + Provides a unified interface to a set of interfaces in a subsystem.
        + Defines a higher-level interface that makes the subsystem easier to use.
    - Template Method 
        + Encapsulates algorithms
        + Defines the skeleton (/steps) of an algorithim in a mehtod, deferring some steps to subclasses
        + Subclasses decide how to implement steps in an algorithm (without changing the algorithm's structure)
    - Iterator
        + Provides a way to traverse/access the elements of an aggregate object sequentially without exposing its internal structure.
        + Takes the job iterating over an aggregate and encapsulates it in another object.
    - Composite
        + Provides a structure to hold both individual objects and composite objects.
        + Lets clients treat individual objects and collections/compositions of objects uniformly.

(NICK'S NOTES)

Behavioral Design Patterns:
Participants: Client is responsible for creating a concrete command and setting its receiver
Invoker holds a comman object and at some point calls its execute() method
Command declares an interface that has at least an execute() method

Design Patterns 07:
The Adapter Pattern:
    Converts the interface of a class into another interface the clients expect
    Adapter let classes work together that couldn't otherwise because of incompatible interfaces

Two Types:
    Object adapters use composition
    Class adapters use inheritance

Facade:
DEFINITION: an outward appearance that is maintained to conceal a less pleasant or creditable reality.

    Provides a unified interface to a set of interfaces in a subsystem
    Facade defines a higher-level interface that makes the subsystem easier to use

*You call this one thing and it calls another things*
*How much goes on behind the curtain, the Facade has more stuff going on*

Adapter alters an interface to make it usable. 
Facade makes a complicated thing more simple

Principle of Least Knowledge:
    -Talk to immediate friends
    -Decouples
    -Law of Demeter
        "Goddess of the Heart" 
            -Methods my talk to... 
                -their own object
                -objects passed as parameters 
                -objects that instantiate
                -instance variables

Design Patterns 08:
    -Behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses
    -It lets one redefine certain steps of an algorithm without changing the algorithm's structure

*The overall algorithm stays the same but we swap parts of it*

*Creating a template for abstract classes, whenever you see an abstract class you know you're using a template 

Hot Beverage EXAMPLE:
-For both coffee and tea 
    -Boil water (same, in base class) 
    -Use hot water to extract (different, abstract in base class) 
    -Pour into cup (same) 
    -Add condiments (different) 
-prepareRecipe is template method 

all steps are present, some are handled by base class, some by subclass 

Hooks: 
    -Can define concrete methods that do nothing unless subclass overrides them
    -Use abstract when subclass must implement hooks when optional

Hollywood Principle 
    -Don't call us, we'll call you 
    -Low-level hooks into system, high-level calls at the appropriate time
    -Java Arrays.sort calls compareTo()

    Summary:
    To prevent subclasses from changing the algorithm, make the template method final 
    Both the strategy and template patterns encapsulate algorithms  
        -Strategy via composition
        -Template via inheritance
    Factory is a very specialized template  
        -Returns result from subclass